buildscript {
    ext.kotlin_version = '1.2.50'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.5'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.2.50"
}
group 'com.adven.concordion'
version = 'develop-SNAPSHOT'

apply plugin: 'maven'
apply plugin: 'kotlin'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'
apply plugin: 'com.google.protobuf'

protobuf {
    generatedFilesBaseDir = "$projectDir/src"
    protoc {
        artifact = 'com.google.protobuf:protoc:3.5.1-1'
    }
}

sourceCompatibility = 1.7
targetCompatibility = 1.7
compileJava.options.encoding = 'utf-8'
compileTestJava.options.encoding = 'utf-8'


repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url 'http://www.gridgainsystems.com/nexus/content/repositories/external'
    }
}

dependencies {
    compile 'org.hamcrest:hamcrest-all:1.3'
    compile 'org.mockito:mockito-core:2.0.43-beta'
    compile 'org.dbunit:dbunit:2.5.2'
    compile 'de.ppi.dbunit.datasetbuilder:dbunit-datasetbuilder:1.4'
    compile 'net.javacrumbs.json-unit:json-unit:1.24.0'
    compile 'com.google.code.gson:gson:2.4'
    compile 'org.xmlunit:xmlunit-core:2.3.0'
    compile 'com.jayway.restassured:rest-assured:2.9.0'
    compile 'org.concordion:concordion:2.1.0'
    compile "net.steppschuh.markdowngenerator:markdowngenerator:1.3.0.0"
    compile 'com.google.code.findbugs:annotations:3.0.1'
    compile 'com.google.guava:guava:19.0'
    compile 'joda-time:joda-time:2.9.9'
    compile 'com.codeborne:selenide:3.11'
    compile 'io.github.bonigarcia:webdrivermanager:1.7.1'
    compile 'com.google.protobuf:protobuf-java:3.5.1'
    compile 'com.google.protobuf:protobuf-java-util:3.5.1'
    compile 'org.apache.kafka:kafka-clients:1.0.0'
    compileOnly 'org.projectlombok:lombok:1.16.18'
    compileOnly 'org.gridgain:gridgain-core:8.3.2'
    testCompile 'junit:junit:4.12'
    testCompile 'com.h2database:h2:1.4.195'
    testCompile 'org.simpleframework:simple:5.1.6'
    testCompile 'org.assertj:assertj-core:3.10.0'
    testCompile 'org.springframework.kafka:spring-kafka-test:2.1.6.RELEASE'
    testCompile 'org.slf4j:slf4j-log4j12:1.7.25'

    compileOnly "org.jetbrains.kotlin:kotlin-stdlib-jdk7"
    testCompile "org.jetbrains.kotlin:kotlin-test"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit"
}

test {
    include 'com/**'
    include '**/Specs.class'
    systemProperty 'concordion.output.dir', "$reporting.baseDir/specs"
    finalizedBy jacocoTestReport
}

tasks.withType(FindBugs) {
    excludeFilter = file("$projectDir/config/findbugs-exclude.xml")
    reports {
        xml.enabled false
        html.enabled true
    }
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
    }
    exclude '**/com/adven/concordion/extensions/exam/kafka/protobuf/TestEntity**'
}

findbugs {
    effort = "max"
    ignoreFailures = false
}

checkstyle {
    toolVersion = "8.10"
    ignoreFailures = false
}

jacocoTestReport {
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/test/**'])
        })
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(id: repoId, url: nexusUrl) {
                authentication(userName: nexusUser, password: nexusPassword)
            }
            pom.groupId = 'ERIB.PFM.Distrib'
            pom.version = '0.4.6'
            pom.artifactId = 'exam'
            pom.withXml {
                asNode().dependencies.'*'.findAll() {
                    it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                        dep.name == it.artifactId.text()
                    }
                }.each() {
                    it.scope*.value = 'compile'
                }
            }
        }
    }
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}