buildscript {
    ext.kotlin_version = '1.3.31'
    ext.ktor_version = '1.2.2'
    ext.exposed_version = '0.16.1'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id "com.jfrog.bintray" version "1.8.1"
    id 'maven-publish'
    id "org.jetbrains.kotlin.jvm" version "1.3.31"
}

group 'org.adven.concordion.ext'
version = 'develop-SNAPSHOT'

apply plugin: 'maven'
apply plugin: 'kotlin'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'

sourceCompatibility = 1.7
targetCompatibility = 1.7
compileJava.options.encoding = 'utf-8'
compileTestJava.options.encoding = 'utf-8'


repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
}

dependencies {
    compile 'org.dbunit:dbunit:2.6.0'
    compile 'net.javacrumbs.json-unit:json-unit:2.7.0'
    compile 'org.xmlunit:xmlunit-core:2.6.2'
    compile 'io.rest-assured:rest-assured:4.0.0'

    compile 'org.concordion:concordion:2.1.0'
    compile "net.steppschuh.markdowngenerator:markdowngenerator:1.3.0.0"
    compile 'com.google.code.findbugs:annotations:3.0.1'
    compile 'joda-time:joda-time:2.9.9'

    compile 'com.codeborne:selenide:3.11'
    compile 'io.github.bonigarcia:webdrivermanager:3.2.0'
    compile 'com.github.jknack:handlebars:4.1.2'

    testCompile 'com.h2database:h2:1.4.195'
    testCompile 'org.assertj:assertj-core:3.10.0'
    testCompile 'com.github.tomakehurst:wiremock-standalone:2.18.0'
    testCompile 'org.mockito:mockito-core:2.28.2'

    testCompile "io.ktor:ktor-server-jetty:$ktor_version"
    testCompile "io.ktor:ktor-jackson:$ktor_version"
    testCompile "io.ktor:ktor-websockets:$ktor_version"

    testCompile "org.jetbrains.exposed:exposed:$exposed_version"
    testCompile "ch.qos.logback:logback-classic:1.2.1"
    testCompile 'com.fasterxml.jackson.datatype:jackson-datatype-joda:2.9.5'

    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
}

test {
    include 'com/**'
    include '**/Specs.class'
    systemProperty 'concordion.output.dir', "$reporting.baseDir/specs"
    finalizedBy jacocoTestReport
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
}

tasks.withType(FindBugs) {
    excludeFilter = file("$projectDir/config/findbugs-exclude.xml")
    reports {
        xml.enabled false
        html.enabled true
    }
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

findbugs {
    effort = "max"
    ignoreFailures = false
}

checkstyle {
    toolVersion = "8.10"
    ignoreFailures = false
}

jacocoTestReport {
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/test/**'])
        })
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            configuration = configurations.compile
            repository(id: nexusRepoId, url: nexusUrl) {
                authentication(userName: nexusUser, password: nexusPassword)
            }
            pom.groupId = nexusGroupId
            pom.artifactId = nexusArtifactId
            pom.version = nexusArtifactVersion
        }
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

javadoc.failOnError = false
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "Adven27"
            name "Nick Toropanov"
            email "n.toropanov@gmail.com"
        }
    }

    scm {
        url "https://github.com/Adven27/Exam"
    }
}

publishing {
    publications {
        mavenPublication(MavenPublication) {
            from components.java
            artifact sourcesJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
            groupId 'org.adven.concordion.ext'
            artifactId 'exam'
            version bintrayVersion
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Extension for Concordion BDD Framework')
                root.appendNode('name', 'Exam')
                root.appendNode('url', 'https://github.com/Adven27/Exam')
                root.children().last() + pomConfig
            }
        }
    }
}

bintray {
    user = bintrayUser
    key = bintrayKey
    publications = ['mavenPublication']

    pkg {
        repo = 'exam'
        name = 'exam'
        userOrg = 'adven27'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/Adven27/Exam.git'
        version {
            name = bintrayVersion
            desc = bintrayVersion
            released  = new Date()
        }
    }

}